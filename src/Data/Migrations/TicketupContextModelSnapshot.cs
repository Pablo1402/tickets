// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(TicketupContext))]
    partial class TicketupContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.15");

            modelBuilder.Entity("Business.Entities.Campain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CampainConfigurationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("QuantityTickets")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampainConfigurationTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Campain", (string)null);
                });

            modelBuilder.Entity("Business.Entities.CampainConfigurationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CampainConfigurationTypes", (string)null);
                });

            modelBuilder.Entity("Business.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Whatsapp")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Business.Entities.ClientCampain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampainId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampainId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCampains", (string)null);
                });

            modelBuilder.Entity("Business.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("StorePlanId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StorePlanId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("Business.Entities.StorePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StorePlans", (string)null);
                });

            modelBuilder.Entity("Business.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientCampainId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("Business.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Business.Entities.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes", (string)null);
                });

            modelBuilder.Entity("Business.Entities.Campain", b =>
                {
                    b.HasOne("Business.Entities.CampainConfigurationType", "CampainConfigurationType")
                        .WithMany("Campains")
                        .HasForeignKey("CampainConfigurationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Entities.Store", "Store")
                        .WithMany("Campains")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampainConfigurationType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Business.Entities.Client", b =>
                {
                    b.HasOne("Business.Entities.Store", "Store")
                        .WithMany("Clients")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Business.Entities.ClientCampain", b =>
                {
                    b.HasOne("Business.Entities.Campain", "Campain")
                        .WithMany("ClientCampains")
                        .HasForeignKey("CampainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Entities.Client", "Client")
                        .WithMany("ClientCampains")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campain");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Business.Entities.Store", b =>
                {
                    b.HasOne("Business.Entities.StorePlan", "StorePlan")
                        .WithMany("Stores")
                        .HasForeignKey("StorePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorePlan");
                });

            modelBuilder.Entity("Business.Entities.Ticket", b =>
                {
                    b.HasOne("Business.Entities.ClientCampain", "ClientCampain")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Business.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCampain");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Business.Entities.User", b =>
                {
                    b.HasOne("Business.Entities.Store", "Store")
                        .WithMany("Users")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Business.Entities.Campain", b =>
                {
                    b.Navigation("ClientCampains");
                });

            modelBuilder.Entity("Business.Entities.CampainConfigurationType", b =>
                {
                    b.Navigation("Campains");
                });

            modelBuilder.Entity("Business.Entities.Client", b =>
                {
                    b.Navigation("ClientCampains");
                });

            modelBuilder.Entity("Business.Entities.ClientCampain", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Business.Entities.Store", b =>
                {
                    b.Navigation("Campains");

                    b.Navigation("Clients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Business.Entities.StorePlan", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Business.Entities.User", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Business.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
